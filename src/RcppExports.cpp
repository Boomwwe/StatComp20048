// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gibbsC
NumericMatrix gibbsC(int N, int thin);
RcppExport SEXP _StatComp20048_gibbsC(SEXP NSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsC(N, thin));
    return rcpp_result_gen;
END_RCPP
}
// fib_cpp_1
int fib_cpp_1(int n);
RcppExport SEXP _StatComp20048_fib_cpp_1(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fib_cpp_1(n));
    return rcpp_result_gen;
END_RCPP
}
// sum3
double sum3(NumericVector x);
RcppExport SEXP _StatComp20048_sum3(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum3(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StatComp20048_gibbsC", (DL_FUNC) &_StatComp20048_gibbsC, 2},
    {"_StatComp20048_fib_cpp_1", (DL_FUNC) &_StatComp20048_fib_cpp_1, 1},
    {"_StatComp20048_sum3", (DL_FUNC) &_StatComp20048_sum3, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_StatComp20048(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
